


ARM Macro Assembler    Page 1 


    1 00000000         ; Start of file Parity.s
    2 00000000         ;
    3 00000000         ; Copyright 2017 University of Dublin. All Rights Reserv
                       ed.
    4 00000000         ;
    5 00000000         ; Design and write an assembly language program that 
    6 00000000         ; will calculate the parity bit for a 7 bit value stored
                        in r0. 
    7 00000000         ; 
    8 00000000         ; The program should then store the computed parity bit 
                       
    9 00000000         ; in bit 7 of r0. Assume even parity.
   10 00000000         ; 
   11 00000000         ; Using even parity, the parity bit of a value is set su
                       ch that the 
   12 00000000         ; number of set bits (1’s) in a value is always even.
   13 00000000         ; 
   14 00000000                 AREA             Parity, CODE, READONLY
   15 00000000                 IMPORT           main
   16 00000000                 EXPORT           start
   17 00000000         start
   18 00000000         
   19 00000000 E3A00036        LDR              r0, =0x36
   20 00000004         
   21 00000004         ; Any changes above this line will prevent CODEMARK
   22 00000004         ; working. Enter your solution between dashed lines.
   23 00000004         ; -------------- start cut ------------------------
   24 00000004         
   25 00000004 E1A01000        MOV              r1, r0
   26 00000008         ;LDR r2, =0
   27 00000008         
   28 00000008 E3A0B001        LDR              r11, =0x1
   29 0000000C         ;AND r11, r1, #0x1 ;Works as intended
   30 0000000C         ;MOV r11, r0
   31 0000000C         ;MOV r10, r1, LSR #8
   32 0000000C         ;EOR r12, r10, r11
   33 0000000C         
   34 0000000C E1A093A1        MOV              r9, r1, LSR #7 ;MSB
   35 00000010         ;SUB r2, r9, r10
   36 00000010         ;EOR r12, r2, r9
   37 00000010 E009900B        AND              r9, r9, r11
   38 00000014         
   39 00000014 E1A08321        MOV              r8, r1, LSR #6
   40 00000018         ;SUB r2, r8, r9
   41 00000018         ;EOR r12, r2, r8
   42 00000018 E008800B        AND              r8, r8, r11
   43 0000001C E0299008        EOR              r9, r9, r8
   44 00000020         
   45 00000020 E1A072A1        MOV              r7, r1, LSR #5
   46 00000024         ;SUB r2, r7, r8
   47 00000024         ;EOR r12, r2, r7
   48 00000024 E007700B        AND              r7, r7, r11
   49 00000028 E0299007        EOR              r9, r9, r7
   50 0000002C         
   51 0000002C E1A06221        MOV              r6, r1, LSR #4
   52 00000030         ;SUB r2, r6, r7
   53 00000030         ;EOR r12, r2, r6
   54 00000030 E006600B        AND              r6, r6, r11
   55 00000034 E0299006        EOR              r9, r9, r6



ARM Macro Assembler    Page 2 


   56 00000038         
   57 00000038 E1A051A1        MOV              r5, r1, LSR #3
   58 0000003C         ;SUB r2, r2, r6
   59 0000003C         ;EOR r12, r2, r5
   60 0000003C E005500B        AND              r5, r5, r11
   61 00000040 E0299005        EOR              r9, r9, r5
   62 00000044         
   63 00000044 E1A04121        MOV              r4, r1, LSR #2
   64 00000048         ;SUB r2, r4, r5
   65 00000048         ;EOR r12, r2, r4
   66 00000048 E004400B        AND              r4, r4, r11
   67 0000004C E0299004        EOR              r9, r9, r4
   68 00000050         
   69 00000050 E1A030A1        MOV              r3, r1, LSR #1 ;LSB (kind of)
   70 00000054         ;SUB r2, r3, r4 ;To give LSB
   71 00000054         ;EOR r12, r2, r3
   72 00000054 E003300B        AND              r3, r3, r11
   73 00000058 E0299003        EOR              r9, r9, r3
   74 0000005C         
   75 0000005C E1A0A009        MOV              r10, r9
   76 00000060 E3A01080        LDR              r1, =0x80
   77 00000064 E00C019A        MUL              r12, r10, r1
   78 00000068         
   79 00000068 E180000C        ORR              r0, r0, r12
   80 0000006C         
   81 0000006C         
   82 0000006C         ;ORR r0, r1, r0
   83 0000006C         ;EOR r0, r0, r1
   84 0000006C         
   85 0000006C         ; -------------- end cut --------------------------
   86 0000006C         ; Any changes below this line will prevent CODEMARK
   87 0000006C         ; working. Enter your solution between dashed lines.
   88 0000006C         
   89 0000006C EAFFFFFE 
                       stop    B                stop
   90 00000070                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\parity.d -o.\objects\parity.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM
\CMSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --prede
fine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 524" --list=.\list
ings\parity.lst Parity.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Parity 00000000

Symbol: Parity
   Definitions
      At line 14 in file Parity.s
   Uses
      None
Comment: Parity unused
start 00000000

Symbol: start
   Definitions
      At line 17 in file Parity.s
   Uses
      At line 16 in file Parity.s
Comment: start used once
stop 0000006C

Symbol: stop
   Definitions
      At line 89 in file Parity.s
   Uses
      At line 89 in file Parity.s
Comment: stop used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 15 in file Parity.s
   Uses
      None
Comment: main unused
1 symbol
337 symbols in table
