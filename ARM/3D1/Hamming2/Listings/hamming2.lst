


ARM Macro Assembler    Page 1 


    1 00000000         ; Start of file Hamming2.s
    2 00000000         ;
    3 00000000         ; Copyright 2017 University of Dublin. All Rights Reserv
                       ed.
    4 00000000         ;
    5 00000000         ; Design and write an assembly language program that wil
                       l detect and correct single 
    6 00000000         ; bit errors in a 12-bit Hamming Code in R0. Your progra
                       m should begin by clearing 
    7 00000000         ; and then re-calculating the check bits using the same 
                       assembly language program 
    8 00000000         ; that was used to generate the original Hamming Code. Y
                       our program should then 
    9 00000000         ; compare the original and re-calculated values and shou
                       ld finally correct any 
   10 00000000         ; single bit error and store the correct 8 bit number in
                        R0.
   11 00000000         ; 
   12 00000000                 AREA             Hamming2, CODE, READONLY
   13 00000000                 IMPORT           main
   14 00000000                 EXPORT           start
   15 00000000         start
   16 00000000         
   17 00000000 E59F0198        LDR              r0, =0xb6b
   18 00000004         
   19 00000004         ; Changes above this line are discarded by CODEMARK.
   20 00000004         ; Enter your solution between dashed lines only.
   21 00000004         ; ARM syntax requires instructions to be indented by
   22 00000004         ; at least one space or tab.
   23 00000004         ; -------------- start cut ------------------------
   24 00000004         ;isolate bits of 8-bit number
   25 00000004 E1A01120        MOV              r1, r0, LSR #2
   26 00000008 E2011001        AND              r1, r1, #0x1 ;bit 2 (0)
   27 0000000C E1A02220        MOV              r2, r0, LSR #4
   28 00000010 E2022001        AND              r2, r2, #0x1 ;bit 4 (1)
   29 00000014 E1A032A0        MOV              r3, r0, LSR #5
   30 00000018 E2033001        AND              r3, r3, #0x1 ;bit 5 (2)
   31 0000001C E1A04320        MOV              r4, r0, LSR #6
   32 00000020 E2044001        AND              r4, r4, #0x1 ;bit 6 (3)
   33 00000024 E1A05420        MOV              r5, r0, LSR #8
   34 00000028 E2055001        AND              r5, r5, #0x1 ;bit 8 (4)
   35 0000002C E1A064A0        MOV              r6, r0, LSR #9
   36 00000030 E2066001        AND              r6, r6, #0x1 ;bit 9 (5)
   37 00000034 E1A07520        MOV              r7, r0, LSR #10
   38 00000038 E2077001        AND              r7, r7, #0x1 ;bit 10 (6)
   39 0000003C E1A085A0        MOV              r8, r0, LSR #11
   40 00000040 E2088001        AND              r8, r8, #0x1 ;bit 11 (7)
   41 00000044         ;calculate hamming code for isolated bits
   42 00000044         ;c0 (2, 4, 6, 8, 10)
   43 00000044 E0219002        EOR              r9, r1, r2
   44 00000048 E024A005        EOR              r10, r4, r5
   45 0000004C E02AB007        EOR              r11, r10, r7
   46 00000050 E02B9009        EOR              r9, r11, r9 ;
   47 00000054         ;c1 (2, 5, 6, 9, 10)
   48 00000054 E021A003        EOR              r10, r1, r3
   49 00000058 E024B006        EOR              r11, r4, r6
   50 0000005C E02BB007        EOR              r11, r11, r7
   51 00000060 E02AA00B        EOR              r10, r10, r11
   52 00000064         ;c2 (4, 5, 6, 11)



ARM Macro Assembler    Page 2 


   53 00000064 E022B003        EOR              r11, r2, r3
   54 00000068 E024C008        EOR              r12, r4, r8
   55 0000006C E02BB00C        EOR              r11, r11, r12
   56 00000070         ;c3 (8, 9, 10, 11)
   57 00000070 E0251006        EOR              r1, r5, r6
   58 00000074 E027C008        EOR              r12, r7, r8
   59 00000078 E021C00C        EOR              r12, r1, r12
   60 0000007C         
   61 0000007C E1A02220        MOV              r2, r0, LSR #4 ; reset 
   62 00000080 E2022001        AND              r2, r2, #0x1 ; bit 4 (2)
   63 00000084         ;recombine to form 12-bit hamming result
   64 00000084 E1A08088        MOV              r8, r8, LSL #1 ; (11)
   65 00000088 E0888007        ADD              r8, r8, r7  ; (10)
   66 0000008C E1A08088        MOV              r8, r8, LSL #1
   67 00000090 E0888006        ADD              r8, r8, r6  ; (9)
   68 00000094 E1A08088        MOV              r8, r8, LSL #1
   69 00000098 E0888005        ADD              r8, r8, r5  ; (8)
   70 0000009C E1A08088        MOV              r8, r8, LSL #1
   71 000000A0 E088800C        ADD              r8, r8, r12 ; (7) -> c3
   72 000000A4 E1A08088        MOV              r8, r8, LSL #1
   73 000000A8 E0888004        ADD              r8, r8, r4  ; (6)
   74 000000AC E1A08088        MOV              r8, r8, LSL #1
   75 000000B0 E0888003        ADD              r8, r8, r3  ; (5)
   76 000000B4 E1A08088        MOV              r8, r8, LSL #1
   77 000000B8 E0888002        ADD              r8, r8, r2  ; (4)
   78 000000BC E1A08088        MOV              r8, r8, LSL #1
   79 000000C0 E088800B        ADD              r8, r8, r11 ; (3) 0-> c2
   80 000000C4 E1A08088        MOV              r8, r8, LSL #1
   81 000000C8 E0888001        ADD              r8, r8, r1  ; (2)
   82 000000CC E1A08088        MOV              r8, r8, LSL #1
   83 000000D0 E088800A        ADD              r8, r8, r10 ; (1) -> c1
   84 000000D4 E1A08088        MOV              r8, r8, LSL #1
   85 000000D8 E0888009        ADD              r8, r8, r9  ; (0) -> c0
   86 000000DC         ;EOR r8 and r0, find difference
   87 000000DC E0281000        EOR              r1, r8, r0
   88 000000E0         ;isolate leeft over check bits
   89 000000E0 E2012001        AND              r2, r1, #1  ; c0
   90 000000E4 E1A030A1        MOV              r3, r1, LSR #1
   91 000000E8 E2033001        AND              r3, r3, #1  ; c1
   92 000000EC E1A041A1        MOV              r4, r1, LSR #3
   93 000000F0 E2044001        AND              r4, r4, #1  ; c2
   94 000000F4 E1A053A1        MOV              r5, r1, LSR #7
   95 000000F8 E2055001        AND              r5, r5, #1  ; c3
   96 000000FC         ;recombine check bits
   97 000000FC E1A05085        MOV              r5, r5, LSL #1 ; (3)
   98 00000100 E0855004        ADD              r5, r5, r4  ; (2)
   99 00000104 E1A05085        MOV              r5, r5, LSL #1
  100 00000108 E0855003        ADD              r5, r5, r3  ; (1)
  101 0000010C E1A05085        MOV              r5, r5, LSL #1
  102 00000110 E0855002        ADD              r5, r5, r2  ; (0)
  103 00000114         ;check bits value -1
  104 00000114 E2451001        SUB              r1, r5, #1
  105 00000118         ;r1 coresponds to position of corrupted bit
  106 00000118         ;MOV r0, r0, ROR r1
  107 00000118         ;EOR r0, r0, #0x1
  108 00000118         ;MOV r2, #0x1F
  109 00000118         ;SUB r1, r2, r1
  110 00000118         ;MOV r0, r0, ROR r1
  111 00000118 E3A02001        LDR              r2, =1



ARM Macro Assembler    Page 3 


  112 0000011C E1A02112        MOV              r2, r2, LSL r1
  113 00000120 E0200002        EOR              r0, r0, r2  ;Correct 12-bit num
                                                            ber
  114 00000124         ;Reconvert 12-bit hamming code to original 8-bit number
  115 00000124 E1A01120        MOV              r1, r0, LSR #2
  116 00000128 E2011001        AND              r1, r1, #1  ; 2 (0)
  117 0000012C E1A02220        MOV              r2, r0, LSR #4
  118 00000130 E2022001        AND              r2, r2, #1  ; 4 (1)
  119 00000134 E1A032A0        MOV              r3, r0, LSR #5
  120 00000138 E2033001        AND              r3, r3, #1  ; 5 (2)
  121 0000013C E1A04320        MOV              r4, r0, LSR #6
  122 00000140 E2044001        AND              r4, r4, #1  ; 6 (3)
  123 00000144 E1A05420        MOV              r5, r0, LSR #8
  124 00000148 E2055001        AND              r5, r5, #1  ; 8 (4)
  125 0000014C E1A064A0        MOV              r6, r0, LSR #9
  126 00000150 E2066001        AND              r6, r6, #1  ; 9 (5)
  127 00000154 E1A07520        MOV              r7, r0, LSR #10
  128 00000158 E2077001        AND              r7, r7, #1  ; 10 (6)
  129 0000015C E1A085A0        MOV              r8, r0, LSR #11
  130 00000160 E2088001        AND              r8, r8, #1  ; 11 (7)
  131 00000164         ;Recombine 8-bits
  132 00000164 E1A08088        MOV              r8, r8, LSL #1 ; 7
  133 00000168 E0888007        ADD              r8, r8, r7  ; 6
  134 0000016C E1A08088        MOV              r8, r8, LSL #1
  135 00000170 E0888006        ADD              r8, r8, r6  ; 5
  136 00000174 E1A08088        MOV              r8, r8, LSL #1
  137 00000178 E0888005        ADD              r8, r8, r5  ; 4
  138 0000017C E1A08088        MOV              r8, r8, LSL #1
  139 00000180 E0888004        ADD              r8, r8, r4  ; 4
  140 00000184 E1A08088        MOV              r8, r8, LSL #1
  141 00000188 E0888003        ADD              r8, r8, r3  ; 3
  142 0000018C E1A08088        MOV              r8, r8, LSL #1
  143 00000190 E0888002        ADD              r8, r8, r2  ; 2
  144 00000194         ;MOV r8, r8, LSL #1
  145 00000194         ;ADD r8, r8, r1; 1
  146 00000194 E1A08088        MOV              r8, r8, LSL #1
  147 00000198 E0880001        ADD              r0, r8, r1  ; 0
  148 0000019C         ; -------------- end cut --------------------------
  149 0000019C         ; Changes below this line are discarded by CODEMARK.
  150 0000019C         ; Enter your solution between dashed lines only.
  151 0000019C         
  152 0000019C EAFFFFFE 
                       stop    B                stop
  153 000001A0                 END
              00000B6B 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\hamming2.d -o.\objects\hamming2.o -ID:\Utilities\Keil\ARM\RV31\INC -ID:\
Utilities\Keil\ARM\CMSIS\Include -ID:\Utilities\Keil\ARM\INC\Philips --predefin
e="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSIO
N SETA 524" --list=.\listings\hamming2.lst hamming2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Hamming2 00000000

Symbol: Hamming2
   Definitions
      At line 12 in file hamming2.s
   Uses
      None
Comment: Hamming2 unused
start 00000000

Symbol: start
   Definitions
      At line 15 in file hamming2.s
   Uses
      At line 14 in file hamming2.s
Comment: start used once
stop 0000019C

Symbol: stop
   Definitions
      At line 152 in file hamming2.s
   Uses
      At line 152 in file hamming2.s
Comment: stop used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 13 in file hamming2.s
   Uses
      None
Comment: main unused
1 symbol
339 symbols in table
