int g = 4;

add r0, #4, r9					; initialse r9 as global variable

int min(int a, int b, int c) {
	int v = a;
	if (b < v) {
		v = b;
	}
	if (c < v) {
		v = c;
	}
	return v;
}
;unoptimised
min:	add	r26, r0, r1			; r26 is 'a', place as r1 for local use, as v
		sub	r27, r1, r0, {C}	; sub with flags (b - v)
		jge	b_ge_v				; jump if b >= v
		xor	r0, r0, r0			; nop
		add	r27, r0, r1			; if b < v -> store b as v (in r1)
b_ge_v:	sub	r28, r1, r0, {C}	; sub with flags (c - v)
		jge	c_ge_v				; jump if c >= v
		xor r0, r0, r0			; nop
		add	r28, r0, r1			; if c < v -> store c as v (in r1)
c_ge_v:	ret	25, 0				; us pc register to return v (r1) -> callr stores return address is r25
		xor r0, r0, r0			; nop

int p(int i, int j, int, k, int l) {
	return min(min(g, i, j), k, l);
}
Not possible to further optimise by removing nops

;unoptimised
p:	add		r9, r0, r10		; set up 1st parameter (g)
	add		r26, r0, r11	; set up
	add		r27, r0, r12
	callr	r25, min
	xor		r0, r0, r0		; nop
	add		r1, r0, r10
	add		r28, r0, r11
	add		r29, r0, r12	; (l)
	callr	r25, min
	xor		r0, r0, r0
	ret		r25, 0			; return result in r1
	xor		r0, r0, r0		; nop
	
;optimised
p:	add		r9, r0, r10		; set up 1st parameter (g)
	add		r26, r0, r11	; set up
	callr	r25, min
	add		r27, r0, r12
	add		r1, r0, r10
	add		r28, r0, r11
	callr	r25, min
	add		r29, r0, r12	; (l)
	ret		r25, 0			; return result in r1
	xor		r0, r0, r0		; nop	

	
int gcd(int a, int b) {
	if (b == 0) {
		return a;
	}
	else {
		return gcd(b, a % b);
	}
}
;unoptimised
p:	add		r9, r0, r10		; set up 1st parameter (g)
	add		r26, r0, r11	; set up
	add		r27, r0, r12
	callr	r25, min
	xor		r0, r0, r0		; nop
	add		r1, r0, r10
	add		r28, r0, r11
	add		r29, r0, r12	; (l)
	callr	r25, min
	xor		r0, r0, r0
	ret		r25, 0			; return result in r1
	xor		r0, r0, r0		; nop
	
;optimised
p:	add		r9, r0, r10		; set up 1st parameter (g)
	add		r26, r0, r11	; set up
	callr	r25, min
	add		r27, r0, r12
	add		r1, r0, r10
	add		r28, r0, r11
	callr	r25, min
	add		r29, r0, r12	; (l)
	ret		r25, 0			; return result in r1
	xor		r0, r0, r0		; nop	